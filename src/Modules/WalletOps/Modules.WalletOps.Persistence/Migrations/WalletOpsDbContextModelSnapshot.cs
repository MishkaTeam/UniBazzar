// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modules.WalletOps.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Modules.WalletOps.Persistence.Migrations
{
    [DbContext(typeof(WalletOpsDbContext))]
    partial class WalletOpsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("WLT")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BuildingBlocks.Persistence.Auditing.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedColumns")
                        .HasColumnType("text");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TraceId")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs", "WLT");
                });

            modelBuilder.Entity("Modules.WalletOps.Domain.Aggregates.WalletTrx.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Wallets", "WLT");
                });

            modelBuilder.Entity("Modules.WalletOps.Domain.Aggregates.WalletTrx.Wallet", b =>
                {
                    b.OwnsMany("Modules.WalletOps.Domain.Aggregates.WalletTrx.HeldFund", "HeldFunds", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<long>("InsertDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("InsertedBy")
                                .HasColumnType("uuid");

                            b1.Property<string>("OperationId")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)");

                            b1.Property<int>("Ordering")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(10000);

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Reason")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.Property<Guid>("StoreId")
                                .HasColumnType("uuid");

                            b1.Property<long>("UpdateDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uuid");

                            b1.Property<int>("Version")
                                .HasColumnType("integer");

                            b1.Property<Guid>("WalletId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("OperationId")
                                .IsUnique()
                                .HasFilter("\"OperationId\" IS NOT NULL");

                            b1.HasIndex("WalletId");

                            b1.ToTable("HeldFunds", "WLT");

                            b1.WithOwner()
                                .HasForeignKey("WalletId");

                            b1.OwnsOne("Modules.WalletOps.Domain.ValueObjects.Money", "Amount", b2 =>
                                {
                                    b2.Property<Guid>("HeldFundId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("numeric")
                                        .HasColumnName("Amount");

                                    b2.Property<string>("Currency")
                                        .IsRequired()
                                        .HasMaxLength(3)
                                        .HasColumnType("character varying(3)")
                                        .HasColumnName("AmountCurrency");

                                    b2.HasKey("HeldFundId");

                                    b2.ToTable("HeldFunds", "WLT");

                                    b2.WithOwner()
                                        .HasForeignKey("HeldFundId");
                                });

                            b1.Navigation("Amount")
                                .IsRequired();
                        });

                    b.OwnsMany("Modules.WalletOps.Domain.Aggregates.WalletTrx.Transaction", "Transactions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)");

                            b1.Property<long>("InsertDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("InsertedBy")
                                .HasColumnType("uuid");

                            b1.Property<string>("OperationId")
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)");

                            b1.Property<int>("Ordering")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(10000);

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("StoreId")
                                .HasColumnType("uuid");

                            b1.Property<byte>("Type")
                                .HasColumnType("smallint");

                            b1.Property<long>("UpdateDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uuid");

                            b1.Property<int>("Version")
                                .HasColumnType("integer");

                            b1.Property<Guid>("WalletId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("OperationId")
                                .IsUnique()
                                .HasFilter("\"OperationId\" IS NOT NULL");

                            b1.HasIndex("WalletId");

                            b1.ToTable("Transactions", "WLT");

                            b1.WithOwner()
                                .HasForeignKey("WalletId");

                            b1.OwnsOne("Modules.WalletOps.Domain.ValueObjects.Money", "Amount", b2 =>
                                {
                                    b2.Property<Guid>("TransactionId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("numeric")
                                        .HasColumnName("Amount");

                                    b2.Property<string>("Currency")
                                        .IsRequired()
                                        .HasMaxLength(3)
                                        .HasColumnType("character varying(3)")
                                        .HasColumnName("AmountCurrency");

                                    b2.HasKey("TransactionId");

                                    b2.ToTable("Transactions", "WLT");

                                    b2.WithOwner()
                                        .HasForeignKey("TransactionId");
                                });

                            b1.Navigation("Amount")
                                .IsRequired();
                        });

                    b.OwnsOne("Modules.WalletOps.Domain.ValueObjects.Money", "HeldBalance", b1 =>
                        {
                            b1.Property<Guid>("WalletId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("HeldBalance");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("HeldBalanceCurrency");

                            b1.HasKey("WalletId");

                            b1.ToTable("Wallets", "WLT");

                            b1.WithOwner()
                                .HasForeignKey("WalletId");
                        });

                    b.OwnsOne("Modules.WalletOps.Domain.ValueObjects.Money", "NonWithdrawableBalance", b1 =>
                        {
                            b1.Property<Guid>("WalletId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("NonWithdrawableBalance");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("NonWithdrawableBalanceCurrency");

                            b1.HasKey("WalletId");

                            b1.ToTable("Wallets", "WLT");

                            b1.WithOwner()
                                .HasForeignKey("WalletId");
                        });

                    b.OwnsOne("Modules.WalletOps.Domain.ValueObjects.Money", "WithdrawableBalance", b1 =>
                        {
                            b1.Property<Guid>("WalletId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("WithdrawableBalance");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("WithdrawableBalanceCurrency");

                            b1.HasKey("WalletId");

                            b1.ToTable("Wallets", "WLT");

                            b1.WithOwner()
                                .HasForeignKey("WalletId");
                        });

                    b.Navigation("HeldBalance")
                        .IsRequired();

                    b.Navigation("HeldFunds");

                    b.Navigation("NonWithdrawableBalance")
                        .IsRequired();

                    b.Navigation("Transactions");

                    b.Navigation("WithdrawableBalance")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
