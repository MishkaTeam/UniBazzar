// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(UniBazzarContext))]
    [Migration("20250721140336_AddHomeView")]
    partial class AddHomeView
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BuildingBlocks.Persistence.Auditing.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedColumns")
                        .HasColumnType("text");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TraceId")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Domain.Aggregates.Attributes.Attribute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Attributes", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.CheckoutCounters.CheckoutCounter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CheckoutCounters");
                });

            modelBuilder.Entity("Domain.Aggregates.Cms.HomeViews.HomeView", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeactivateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemic")
                        .HasColumnType("boolean");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sorting")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("HomeViews", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMobileVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("\"Email\" IS NOT NULL");

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.HasIndex("NationalCode")
                        .IsUnique()
                        .HasFilter("\"NationalCode\" IS NOT NULL");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Customers.ShippingAddresses.ShippingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShippingAddresses");
                });

            modelBuilder.Entity("Domain.Aggregates.Discounts.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeactivateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Maximum")
                        .HasColumnType("integer");

                    b.Property<int>("Minimum")
                        .HasColumnType("integer");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Domain.Aggregates.Discounts.DiscountCustomers.DiscountCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountId");

                    b.ToTable("DiscountCustomers");
                });

            modelBuilder.Entity("Domain.Aggregates.Discounts.DsiscounProducts.DiscountProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("DiscountProducts");
                });

            modelBuilder.Entity("Domain.Aggregates.Ordering.Baskets.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte>("BasketStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Platform")
                        .HasColumnType("smallint");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Baskets", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Ordering.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uuid");

                    b.Property<string>("BasketReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.PriceLists.PriceList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProductPriceLists");
                });

            modelBuilder.Entity("Domain.Aggregates.ProductReviews.ProductReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Rate")
                        .HasColumnType("smallint");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("Domain.Aggregates.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("DownloadUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProductType")
                        .HasColumnType("integer");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Products.ProductAttributes.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ProductAttributeType")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributes", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Products.ProductFeatures.ProductFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFeatures", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Products.ProductImages.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Stores.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Culture")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("HostUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Stores", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Units.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BaseUnitId")
                        .HasColumnType("uuid");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Ratio")
                        .HasColumnType("numeric");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BaseUnitId");

                    b.ToTable("Units", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("Role")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.branches.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("InsertDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InsertedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10000);

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdateDateTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Branches", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Attributes.Attribute", b =>
                {
                    b.HasOne("Domain.Aggregates.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.Aggregates.Attributes.AttributeValue", "AttributeValues", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("AttributeId")
                                .HasColumnType("uuid");

                            b1.Property<long>("InsertDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("InsertedBy")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsPreSelected")
                                .HasColumnType("boolean");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<int>("Ordering")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("PriceAdjustment")
                                .HasColumnType("numeric");

                            b1.Property<Guid>("StoreId")
                                .HasColumnType("uuid");

                            b1.Property<long>("UpdateDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uuid");

                            b1.Property<int>("Version")
                                .HasColumnType("integer");

                            b1.Property<decimal>("WeightAdjustment")
                                .HasColumnType("numeric");

                            b1.HasKey("Id");

                            b1.HasIndex("AttributeId");

                            b1.ToTable("AttributeValues", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AttributeId");
                        });

                    b.Navigation("AttributeValues");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Aggregates.Categories.Category", b =>
                {
                    b.HasOne("Domain.Aggregates.Categories.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Aggregates.Cms.HomeViews.HomeView", b =>
                {
                    b.OwnsMany("Domain.Aggregates.Cms.HomeViews.ImageViewItem", "ImageViews", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("Column")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<Guid>("HomeViewId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ImageUrl")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<long>("InsertDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("InsertedBy")
                                .HasColumnType("uuid");

                            b1.Property<string>("NavigationUrl")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<int>("Ordering")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(10000);

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("StoreId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)");

                            b1.Property<long>("UpdateDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uuid");

                            b1.Property<int>("Version")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("HomeViewId");

                            b1.ToTable("ImageViewItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("HomeViewId");
                        });

                    b.OwnsMany("Domain.Aggregates.Cms.HomeViews.ProductViewItem", "ProductViews", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("HomeViewId")
                                .HasColumnType("uuid");

                            b1.Property<long>("InsertDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("InsertedBy")
                                .HasColumnType("uuid");

                            b1.Property<int>("Ordering")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(10000);

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("StoreId")
                                .HasColumnType("uuid");

                            b1.Property<long>("UpdateDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uuid");

                            b1.Property<int>("Version")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("HomeViewId");

                            b1.HasIndex("ProductId");

                            b1.ToTable("ProductViewItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("HomeViewId");

                            b1.HasOne("Domain.Aggregates.Products.Product", "Product")
                                .WithMany()
                                .HasForeignKey("ProductId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Product");
                        });

                    b.OwnsMany("Domain.Aggregates.Cms.HomeViews.SlideViewItem", "SliderViews", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("HomeViewId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ImageUrl")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<long>("InsertDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("InsertedBy")
                                .HasColumnType("uuid");

                            b1.Property<int>("Interval")
                                .HasColumnType("integer");

                            b1.Property<string>("NavigationUrl")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<int>("Ordering")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(10000);

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("StoreId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)");

                            b1.Property<long>("UpdateDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uuid");

                            b1.Property<int>("Version")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("HomeViewId");

                            b1.ToTable("SliderViewItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("HomeViewId");
                        });

                    b.Navigation("ImageViews");

                    b.Navigation("ProductViews");

                    b.Navigation("SliderViews");
                });

            modelBuilder.Entity("Domain.Aggregates.Customers.ShippingAddresses.ShippingAddress", b =>
                {
                    b.HasOne("Domain.Aggregates.Customers.Customer", "Customers")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Domain.Aggregates.Discounts.DiscountCustomers.DiscountCustomer", b =>
                {
                    b.HasOne("Domain.Aggregates.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Discounts.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Domain.Aggregates.Discounts.DsiscounProducts.DiscountProduct", b =>
                {
                    b.HasOne("Domain.Aggregates.Discounts.Discount", "Discount")
                        .WithMany("DiscountProducts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Aggregates.Ordering.Baskets.Basket", b =>
                {
                    b.OwnsOne("Domain.Aggregates.Ordering.ValueObjects.DiscountAmount", "TotalDiscountAmount", b1 =>
                        {
                            b1.Property<Guid>("BasketId")
                                .HasColumnType("uuid");

                            b1.Property<byte>("DiscountType")
                                .HasColumnType("smallint")
                                .HasColumnName("TotalDiscountType");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("TotalDiscountAmount");

                            b1.HasKey("BasketId");

                            b1.ToTable("Baskets");

                            b1.WithOwner()
                                .HasForeignKey("BasketId");
                        });

                    b.OwnsMany("Domain.Aggregates.Ordering.Baskets.BasketItem", "BasketItems", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("BasketId")
                                .HasColumnType("uuid");

                            b1.Property<string>("BasketReferenceNumber")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)");

                            b1.Property<long>("InsertDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("InsertedBy")
                                .HasColumnType("uuid");

                            b1.Property<int>("Ordering")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(10000);

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("StoreId")
                                .HasColumnType("uuid");

                            b1.Property<long>("UpdateDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uuid");

                            b1.Property<int>("Version")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("BasketId");

                            b1.ToTable("BasketItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BasketId");

                            b1.OwnsOne("Domain.Aggregates.Ordering.ValueObjects.DiscountAmount", "DiscountAmount", b2 =>
                                {
                                    b2.Property<Guid>("BasketItemId")
                                        .HasColumnType("uuid");

                                    b2.Property<byte>("DiscountType")
                                        .HasColumnType("smallint")
                                        .HasColumnName("DiscountType");

                                    b2.Property<decimal>("Value")
                                        .HasColumnType("numeric")
                                        .HasColumnName("DiscountAmount");

                                    b2.HasKey("BasketItemId");

                                    b2.ToTable("BasketItems");

                                    b2.WithOwner()
                                        .HasForeignKey("BasketItemId");
                                });

                            b1.OwnsOne("Domain.Aggregates.Ordering.ValueObjects.ProductType", "Product", b2 =>
                                {
                                    b2.Property<Guid>("BasketItemId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("ProductId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("ProductId");

                                    b2.Property<string>("ProductName")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)")
                                        .HasColumnName("ProductName");

                                    b2.HasKey("BasketItemId");

                                    b2.ToTable("BasketItems");

                                    b2.WithOwner()
                                        .HasForeignKey("BasketItemId");
                                });

                            b1.OwnsOne("Domain.Aggregates.Ordering.ValueObjects.ProductAmount", "ProductAmount", b2 =>
                                {
                                    b2.Property<Guid>("BasketItemId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("BasePrice")
                                        .HasColumnType("numeric")
                                        .HasColumnName("ProductBasePrice");

                                    b2.Property<long>("Quantity")
                                        .HasColumnType("bigint")
                                        .HasColumnName("ProductQuantity");

                                    b2.HasKey("BasketItemId");

                                    b2.ToTable("BasketItems");

                                    b2.WithOwner()
                                        .HasForeignKey("BasketItemId");
                                });

                            b1.OwnsMany("Domain.Aggregates.Ordering.Baskets.BasketItemAttribute", "BasketItemAttributes", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("BasketItemId")
                                        .HasColumnType("uuid");

                                    b2.Property<long>("InsertDateTime")
                                        .HasColumnType("bigint");

                                    b2.Property<Guid>("InsertedBy")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Ordering")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer")
                                        .HasDefaultValue(10000);

                                    b2.Property<Guid>("OwnerId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("PriceAdjustment")
                                        .HasColumnType("numeric");

                                    b2.Property<Guid>("ProductAttributeId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("ProductAttributeName")
                                        .IsRequired()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)");

                                    b2.Property<string>("ProductAttributeValue")
                                        .IsRequired()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)");

                                    b2.Property<Guid?>("ProductAttributeValueId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("StoreId")
                                        .HasColumnType("uuid");

                                    b2.Property<long>("UpdateDateTime")
                                        .HasColumnType("bigint");

                                    b2.Property<Guid>("UpdatedBy")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Version")
                                        .HasColumnType("integer");

                                    b2.HasKey("Id");

                                    b2.HasIndex("BasketItemId");

                                    b2.ToTable("BasketItemAttributes", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("BasketItemId");
                                });

                            b1.Navigation("BasketItemAttributes");

                            b1.Navigation("DiscountAmount")
                                .IsRequired();

                            b1.Navigation("Product")
                                .IsRequired();

                            b1.Navigation("ProductAmount")
                                .IsRequired();
                        });

                    b.Navigation("BasketItems");

                    b.Navigation("TotalDiscountAmount")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Aggregates.Ordering.Orders.Order", b =>
                {
                    b.OwnsMany("Domain.Aggregates.Ordering.Orders.OrderItem", "OrderItems", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<long>("InsertDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("InsertedBy")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<string>("OrderReferenceNumber")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)");

                            b1.Property<int>("Ordering")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(10000);

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("StoreId")
                                .HasColumnType("uuid");

                            b1.Property<long>("UpdateDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uuid");

                            b1.Property<int>("Version")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OrderId");

                            b1.ToTable("OrderItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.OwnsOne("Domain.Aggregates.Ordering.ValueObjects.DiscountAmount", "DiscountAmount", b2 =>
                                {
                                    b2.Property<Guid>("OrderItemId")
                                        .HasColumnType("uuid");

                                    b2.Property<byte>("DiscountType")
                                        .HasColumnType("smallint")
                                        .HasColumnName("DiscountType");

                                    b2.Property<decimal>("Value")
                                        .HasColumnType("numeric")
                                        .HasColumnName("DiscountAmount");

                                    b2.HasKey("OrderItemId");

                                    b2.ToTable("OrderItems");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderItemId");
                                });

                            b1.OwnsOne("Domain.Aggregates.Ordering.ValueObjects.ProductType", "Product", b2 =>
                                {
                                    b2.Property<Guid>("OrderItemId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("ProductId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("ProductId");

                                    b2.Property<string>("ProductName")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)")
                                        .HasColumnName("ProductName");

                                    b2.HasKey("OrderItemId");

                                    b2.ToTable("OrderItems");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderItemId");
                                });

                            b1.OwnsOne("Domain.Aggregates.Ordering.ValueObjects.ProductAmount", "ProductAmount", b2 =>
                                {
                                    b2.Property<Guid>("OrderItemId")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("BasePrice")
                                        .HasColumnType("numeric")
                                        .HasColumnName("ProductBasePrice");

                                    b2.Property<long>("Quantity")
                                        .HasColumnType("bigint")
                                        .HasColumnName("ProductQuantity");

                                    b2.HasKey("OrderItemId");

                                    b2.ToTable("OrderItems");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderItemId");
                                });

                            b1.Navigation("DiscountAmount")
                                .IsRequired();

                            b1.Navigation("Product")
                                .IsRequired();

                            b1.Navigation("ProductAmount")
                                .IsRequired();
                        });

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Domain.Aggregates.PriceLists.PriceList", b =>
                {
                    b.OwnsMany("Domain.Aggregates.PriceLists.PriceListItem", "Items", b1 =>
                        {
                            b1.Property<Guid>("PriceListId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)");

                            b1.Property<long>("InsertDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("InsertedBy")
                                .HasColumnType("uuid");

                            b1.Property<int>("Ordering")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("StoreId")
                                .HasColumnType("uuid");

                            b1.Property<long>("UpdateDateTime")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("UpdatedBy")
                                .HasColumnType("uuid");

                            b1.Property<int>("Version")
                                .HasColumnType("integer");

                            b1.HasKey("PriceListId", "Id");

                            b1.HasIndex("ProductId");

                            b1.ToTable("PriceListItem");

                            b1.WithOwner()
                                .HasForeignKey("PriceListId");

                            b1.HasOne("Domain.Aggregates.Products.Product", "Product")
                                .WithMany()
                                .HasForeignKey("ProductId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Product");
                        });

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Aggregates.ProductReviews.ProductReview", b =>
                {
                    b.HasOne("Domain.Aggregates.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Aggregates.Products.Product", b =>
                {
                    b.HasOne("Domain.Aggregates.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Units.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Domain.Aggregates.Products.ProductAttributes.ProductAttribute", b =>
                {
                    b.HasOne("Domain.Aggregates.Attributes.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Products.Product", null)
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId");

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("Domain.Aggregates.Products.ProductFeatures.ProductFeature", b =>
                {
                    b.HasOne("Domain.Aggregates.Products.Product", "Product")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Aggregates.Products.ProductImages.ProductImage", b =>
                {
                    b.HasOne("Domain.Aggregates.Products.Product", null)
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Aggregates.Units.Unit", b =>
                {
                    b.HasOne("Domain.Aggregates.Units.Unit", "BaseUnit")
                        .WithMany()
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BaseUnit");
                });

            modelBuilder.Entity("Domain.Aggregates.Customers.Customer", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Aggregates.Discounts.Discount", b =>
                {
                    b.Navigation("DiscountProducts");
                });

            modelBuilder.Entity("Domain.Aggregates.Products.Product", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductFeatures");

                    b.Navigation("ProductImages");
                });
#pragma warning restore 612, 618
        }
    }
}
