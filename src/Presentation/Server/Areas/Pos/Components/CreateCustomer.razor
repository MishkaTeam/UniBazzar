@using Application.Aggregates.Customers
@using Application.Aggregates.Customers.ViewModels
@using Framework.DataType
@using Resources
@using Resources.Messages

@inject CustomerApplication CustomerApplication
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<button type="button" class="col btn btn-primary @(Class ?? "")" data-bs-toggle="modal" data-bs-target="#@(CreateCustomerModelId)">@(Resources.DataDictionary.CreateOf) @(Resources.DataDictionary.Customer)</button>

<div class="modal fade" id="@(CreateCustomerModelId)" tabindex="-1" aria-labelledby="createCustomerModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<EditForm EditContext="Context" OnValidSubmit="() => OnValidSubmit()" on>
				<DataAnnotationsValidator />
				<div class="modal-header">
					<h1 class="modal-title fs-5" id="createCustomerModalLabel">@(Resources.DataDictionary.CreateOf) @(Resources.DataDictionary.Customer)</h1>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div class="px-2">

						<div class="mb-3">
							<label class="form-label" for="@(nameof(CreateViewModel.LastName))">@(Resources.DataDictionary.Family)</label>
							<InputText class="form-control" id="@(nameof(CreateViewModel.LastName))" @bind-Value="CreateViewModel.LastName" />
							<ValidationMessage class="text-danger" For="() => CreateViewModel.LastName" />
						</div>

						<div class="mb-3">
							<label class="form-label" for="@(nameof(CreateViewModel.Mobile))">@(Resources.DataDictionary.Mobile)</label>
							<InputText class="form-control" id="@(nameof(CreateViewModel.Mobile))" @bind-Value="CreateViewModel.Mobile" />
							<ValidationMessage class="text-danger" For="() => CreateViewModel.Mobile" />
						</div>

						<div class="mb-3">
							<label class="form-label" for="@(nameof(CreateViewModel.NationalCode))">@(Resources.DataDictionary.NationalCode)</label>
							<InputText class="form-control" id="@(nameof(CreateViewModel.NationalCode))" @bind-Value="CreateViewModel.NationalCode" />
							<ValidationMessage class="text-danger" For="() => CreateViewModel.NationalCode" />
						</div>

					</div>
				</div>
				<div class="modal-footer">
					<button @onclick="() => OnSubmit()" class="btn btn-primary" type="submit"><i class="mx-1 bi bi-plus-square"></i>@(Resources.ButtonCaptions.Create)</button>
					<button class="btn btn-secondary" type="reset"><i class="mx-1 bi bi-repeat"></i>@(Resources.ButtonCaptions.Reset)</button>
				</div>
			</EditForm>
		</div>
	</div>
</div>


@code {

	[Parameter]
	public string? Class { get; set; }

	private CreateCustomerViewModelPos CreateViewModel { get; set; } = new();

	private EditContext Context { get; set; }
	private ValidationMessageStore MessageStore { get; set; }

	private bool nationalCodeIsValid = true;

	private const string CreateCustomerModelId = "createCustomerModal";


	protected override void OnInitialized()
	{
		Context = new EditContext(CreateViewModel);
		MessageStore = new ValidationMessageStore(Context);
	}

	private void OnSubmit()
	{
		MessageStore.Clear();

		// Can't use Regex for validate [NationalCode] field.
		if (CreateViewModel.NationalCode?.IsValidNationalCode() == false &&
			CreateViewModel.NationalCode.Length == Constants.FixedLength.NationalCode)
		{
			var message =
				string.Format(Validations.NationalCode, DataDictionary.NationalCode);

			MessageStore.Add(() => CreateViewModel.NationalCode, message);
			Context.NotifyValidationStateChanged();

			nationalCodeIsValid = false;

			return;
		}

		if (string.IsNullOrWhiteSpace(CreateViewModel.NationalCode) == true)
		{
			CreateViewModel.NationalCode = null;
		}

		nationalCodeIsValid = true;
	}

	private async Task OnValidSubmit()
	{
		if (nationalCodeIsValid == false)
		{
			return;
		}

		await CustomerApplication.CreateAsync(CreateViewModel);

		await CloseModalAsync();

		CreateViewModel = new();
	}

	private async Task CloseModalAsync()
	{
		CreateViewModel = new();

		await JS.InvokeVoidAsync("hideModal", CreateCustomerModelId);
	}

}